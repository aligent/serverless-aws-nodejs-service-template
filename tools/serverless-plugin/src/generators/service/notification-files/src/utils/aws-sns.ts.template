/* v8 ignore start */
import {
    PublishCommand,
    PublishCommandInput,
    PublishCommandOutput,
    SNSClient,
} from '@aws-sdk/client-sns';

export class AmazonSNS {
    private readonly client: SNSClient;
    private readonly topicArn: string;

    private readonly maxBytes = 262144; // 256KB
    // Making the assumption that it would be rare to have Egyptian Hieroglyphs
    // in the message this approximation should be good enough
    private readonly maxChars = this.maxBytes / 2 - 1;
    private readonly maxSubjectChars = 100;

    constructor(topicArn: string) {
        const region = topicArn.split(':')[3] as string;

        this.client = new SNSClient({ region });
        this.topicArn = topicArn;
    }

    /**
     * This function send a message to an SNS topic
     * Due to the SNS subject and message size restrictions
     * the subject and message will be truncated if they exceeds the maximum allowed size.
     *
     * @async
     * @param {string} subject - The subject of the message
     * @param {string} message - The message to send
     * @returns {Promise<PublishCommandOutput>}
     */
    async publish(
        subject: string,
        message: string
    ): Promise<PublishCommandOutput> {
        const input: PublishCommandInput = {
            TopicArn: this.topicArn,
            Subject: subject,
            Message: message,
        };

        if (subject.length > this.maxSubjectChars) {
            console.warn('Need to truncate SNS subject, too long');
            input.Subject = subject.substring(0, this.maxSubjectChars);
        }

        if (Buffer.byteLength(message, 'utf8') > this.maxBytes) {
            console.warn('Need to truncate SNS message, too long');
            input.Message = message.substring(0, this.maxChars);
        }

        return await this.client.send(new PublishCommand(input));
    }
}
