#!/bin/bash
# Script adapted from https://github.com/kaczor6418/git-hooks-example/blob/master/git-hooks/pre-commit

# Support using VSCode to commit
# This loads nvm.sh and sets the correct PATH before running hook
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Define colours for nicer CLI output
RED="\033[1;31m"
GREEN="\033[1;32m"
NO_COLOUR="\033[0m"

echo -e "${GREEN}Executing git hook $0 $@${NO_COLOUR}"

# Use the current Node version explicitly
nvm use

# Get the list of staged changes
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Exclude files that shouldn't trigger pre-commit checks
# This is done here because `nx affected` doesn't look at task inputs
# when determining if a project is affected
EXCLUDED_FILES_REGEX='.*\.md$' # Ignore markdown files
EXCLUDED_FILES_REGEX+='|.*\/step-functions\/.*\.(yml|yaml)$' # Ignore step function yaml files
EXCLUDED_FILES_REGEX+='|^\/?([^\/]*)$' # Ignore all root-level files
AFFECTED_FILES=$(echo "$STAGED_FILES" | \
  grep -vE "$EXCLUDED_FILES_REGEX" | \
  paste -sd,)

echo -e "${GREEN}\nAffected files: $AFFECTED_FILES\n${NO_COLOUR}"

# Exit early if there are no affected files
if [ -z "$AFFECTED_FILES" ]; then
  echo -e "${GREEN}No affected files found. Exiting pre-commit hook.${NO_COLOUR}"
  exit 0
fi

# Prepare the affected commands for static analysis targets
AFFECTED_COMMAND="yarn nx affected --files=$AFFECTED_FILES --nxBail --tui=false"
commands=("$AFFECTED_COMMAND -t lint typecheck --parallel=3", "$AFFECTED_COMMAND -t test --configuration coverage")
failures=()

# Loop over commands, execute and push failure message if we see one
for cmd in "${commands[@]}"; do
  $cmd
  exit_code=$?

  if [ "$exit_code" -eq 1 ]; then
    failures+=("âœ– Command ${RED}'${cmd}'${NO_COLOUR} failed with exit code ${exit_code} - see CLI output for errors")
  elif [ "$exit_code" -eq 127 ]; then
    failures+=("âœ– Command ${RED}'${cmd}'${NO_COLOUR} failed with exit code ${exit_code} - check that the script exists in package.json")
  elif [ "$exit_code" -ne 0 ]; then
    failures+=("âœ– Command ${RED}'${cmd}'${NO_COLOUR} failed with unexpected exit code ${exit_code}")
  fi
done

# Report overall success or failure
if [ ${#failures[@]} -ne 0 ]; then
  echo -e "\nðŸš©${RED} Couldn't commit changes dues to the following errors: ${NO_COLOUR}"

  for report in "${failures[@]}"; do
    echo -e $report;
  done

  exit 1
fi
