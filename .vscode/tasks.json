{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "inputs": [
        {
            "id": "functionName",
            "type": "promptString",
            "default": "hello",
            "description": "Enter the function logical name as shown in `serverless.yml`: "
        },
        {
            "id": "specName",
            "type": "promptString",
            "default": "name-of-spec",
            "description": "I am debugging test case: "
        },
        {
            "id": "payloadData",
            "type": "promptString",
            "default": "'{\"foo\":\"bar\"}'",
            "description": "Please use this payload data: "
        },
        {
            // This must be inside our workspace folder as we only mount bind $pwd:/app
            // NOTE: Do not add / at the beginning of the input
            "id": "dataFile",
            "type": "promptString",
            "default": "debug-local-invoke.json",
            "description": "Please use the data from this file: "
        }
    ],
    "tasks": [
        // Run a Jest test with debug enabled
        {
            "type": "docker-run",
            "label": "sls-docker: debug-test",
            "icon": {
                "color": "terminal.ansiYellow",
                "id": "beaker"
            },
            "dockerRun": {
                "image": "aligent/serverless:latest",
                "containerName": "vsdebug-test",
                "portsPublishAll": false,
                "ports": [
                    {
                        "containerPort": 9229,
                        "hostPort": 9229
                    }
                ],
                "volumes": [
                    {
                        "localPath": "${userHome}/.aws",
                        "containerPath": "/home/node/.aws"
                    },
                    {
                        "localPath": "${userHome}/.azure",
                        "containerPath": "/home/node/.azure"
                    },
                    {
                        "localPath": "${userHome}/.npm",
                        "containerPath": "/home/node/.npm"
                    },
                    {
                        "localPath": "${workspaceFolder}",
                        "containerPath": "/app"
                    }
                ],
                "command": "npm run debug-test -- -t \"${input:specName}\""
            },
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true,
                "close": true
            },
            "dependsOn": [
                "sls-docker: remove-old-containers"
            ]
        },
        // Invoke local lambda function with debug enabled with string data
        // Note: First run will always fails because the IDE needs to bind with source map which is not available yet
        {
            "type": "docker-run",
            "label": "sls-docker: debug-invoke-local-data",
            "icon": {
                "color": "terminal.ansiYellow",
                "id": "debug-alt"
            },
            "dockerRun": {
                "image": "aligent/serverless:latest",
                "containerName": "vsdebug-invoke-local",
                "portsPublishAll": false,
                "ports": [
                    {
                        "containerPort": 9229,
                        "hostPort": 9229
                    }
                ],
                "volumes": [
                    {
                        "localPath": "${userHome}/.aws",
                        "containerPath": "/home/node/.aws"
                    },
                    {
                        "localPath": "${userHome}/.azure",
                        "containerPath": "/home/node/.azure"
                    },
                    {
                        "localPath": "${userHome}/.npm",
                        "containerPath": "/home/node/.npm"
                    },
                    {
                        "localPath": "${workspaceFolder}",
                        "containerPath": "/app"
                    }
                ],
                "command": "npm run debug-invoke-local -- -f ${input:functionName} -d ${input:payloadData}"
            },
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true,
                "close": true
            },
            "dependsOn": [
                "sls-docker: debug-package"
            ]
        },
        // Invoke local lambda function with debug enabled with data file
        {
            "type": "docker-run",
            "label": "sls-docker: debug-invoke-local-path",
            "icon": {
                "color": "terminal.ansiYellow",
                "id": "debug-alt"
            },
            "dockerRun": {
                "image": "aligent/serverless:latest",
                "containerName": "vsdebug-invoke-local",
                "portsPublishAll": false,
                "ports": [
                    {
                        "containerPort": 9229,
                        "hostPort": 9229
                    }
                ],
                "volumes": [
                    {
                        "localPath": "${userHome}/.aws",
                        "containerPath": "/home/node/.aws"
                    },
                    {
                        "localPath": "${userHome}/.azure",
                        "containerPath": "/home/node/.azure"
                    },
                    {
                        "localPath": "${userHome}/.npm",
                        "containerPath": "/home/node/.npm"
                    },
                    {
                        "localPath": "${workspaceFolder}",
                        "containerPath": "/app"
                    }
                ],
                "command": "npm run debug-invoke-local -- -f ${input:functionName} -p ${input:dataFile}"
            },
            "problemMatcher": [],
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true,
                "close": true
            },
            "dependsOn": [
                "sls-docker: debug-package"
            ]
        },
        // Package for debugging
        {
            "type": "docker-run",
            "label": "sls-docker: debug-package",
            "icon": {
                "color": "terminal.ansiYellow",
                "id": "debug-alt"
            },
            "dockerRun": {
                "image": "aligent/serverless:latest",
                "containerName": "vsdebug-package",
                "portsPublishAll": false,
                "volumes": [
                    {
                        "localPath": "${userHome}/.aws",
                        "containerPath": "/home/node/.aws"
                    },
                    {
                        "localPath": "${userHome}/.azure",
                        "containerPath": "/home/node/.azure"
                    },
                    {
                        "localPath": "${userHome}/.npm",
                        "containerPath": "/home/node/.npm"
                    },
                    {
                        "localPath": "${workspaceFolder}",
                        "containerPath": "/app"
                    }
                ],
                "command": "npm run debug-package"
            },
            "problemMatcher": [],
            "presentation": {
                "echo": false,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true,
                "close": true
            },
            "dependsOn": [
                "sls-docker: remove-old-containers"
            ]
        },
        // Remove old containters
        {
            "type": "shell",
            "label": "sls-docker: remove-old-containers",
            "icon": {
                "color": "terminal.ansiGreen",
                "id": "package"
            },
            "hide": true,
            "command": [
                "[[ -z \"$(docker container ls -qa --filter name=vsdebug-)\" ]]",
                "&&",
                "echo Nothing to remove",
                "||",
                "docker container rm $(docker container ls -qa --filter name=vsdebug-)"
            ],
            "problemMatcher": [],
            "presentation": {
                "echo": false,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true,
                "close": true
            },
            "dependsOn": [
                "sls-docker: stop-old-containers"
            ]
        },
        // Stop old containters if any of them are still running
        {
            "type": "shell",
            "label": "sls-docker: stop-old-containers",
            "icon": {
                "color": "terminal.ansiGreen",
                "id": "package"
            },
            "hide": true,
            "command": [
                "[[ -z \"$(docker container ls -q --filter name=vsdebug- --filter status=running)\" ]]",
                "&&",
                "echo Nothing is running",
                "||",
                "docker container stop $(docker container ls -q --filter name=vsdebug- --filter status=running)",
            ],
            "problemMatcher": [],
            "presentation": {
                "echo": false,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": true,
                "close": true
            }
        }
    ]
}